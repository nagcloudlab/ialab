
s/w

    - application  ( object model )
    - datasource   ( relational model )


How to work with relational/SQL databases from java-application ?

    2 technologies,

    way-1 : JDBC ( Java Database Connectivity ) api  ( legacy )
    way-2 : JPA ( Java Persistent API )  ( modern )

-------------------------------------------------------------------------

steps to use JDBC Api?

step-1 : register JDBC-driver  ( provides details of DBMS product )
step-2 : create database connection with URL,username and password
step-3 : create jdbc statements with SQL
step-4 : execute statements & process results
step-5 : optionally , manage transactions
step-6 : handle SQLExceptions
step-7 : close connection

-------------------------------------------------------------------------

Problems/limitations with JDBC API

    -> connection management by us
    -> too much code for simple CRUD operations
    -> associations b/w between entities should manage by us
    -> should handle checked SQLException by force
    -> code partially depends on DBMS product due to SQL statements
    -> No caching support


final-note : JDBC is low-level api, not good for complex data accessing projects

-------------------------------------------------------------------------

Solution:

    => use ORM ( Object Relational Mapping ) frameworks

    standard specification/interface for ORM

    => JPA ( Java Persistent API )

        JPA implementations / providers

        - Hibernate ORM  ( from Jboss-community )  ( 99% )
        - Eclipselink    ( from eclipse )
        - Toplink        ( from Oracle )
        ..

-------------------------------------------------------------------------